# The configuration file provides values for the two, differential
# drive motors, 'm1' and 'm2'. See the article:
# https://resources.basicmicro.com/auto-tuning-with-motion-studio/
# for a description of how to derive the p, i, d and qpps values.
#
# This configuration file is set up and an example for use with
# A Raspberry PI 5 using a UART to connect to a RoboClaw motor driver.
# See the README.md file for more information on how to set up
# the RoboClaw and the Raspberry PI and how to set values in this file.

motor_driver_node:
  ros__parameters:
    # Incremental acceleration to use in quadrature pulses per second.
    accel_quad_pulses_per_second: 5000

    # The device name to be opened. Change this to your actual device you are using.
    # Both USB and UART devices are supported. The device name is the
    # name of the device as it appears in the /dev directory.
    device_name: "/dev/roboclaw"
    baud_rate: 115200 # This does not apply when using USB.

    # The assigned port for the device (as configured on the RoboClaw).
    device_port: 128

    # The P, I, D and maximum quadrature pulses per second for both motors.
    # These values are for my robot. Replace them with your own values.
    # Use can use Basic Micro's Motion Studio to determine the values.
    m1_p: 10.0
    m1_i: 0.0
    m1_d: 0.0
    m1_qpps: 2437
    m2_p: 10.0
    m2_i: 0.0
    m2_d: 0.0
    m2_qpps: 2437

    # The maximum expected current (in amps) for both motors.
    # Used just to signal warnings.
    m1_max_current: 6.0
    m2_max_current: 6.0

    # Rate limiting commands. The driver will clip any value
    # exceeding these limits.
    max_angular_velocity: 2.0
    max_linear_velocity: 2.0

    # If no new motor commands is received since the last motor
    # command in this number of seconds, stop the motors.
    max_seconds_uncommanded_travel: 0.5

    publish_joint_states: false
    publish_odom: true

    # Based upon your particular motor gearing and encoders.
    # These values are used to scale cmd_vel commands
    # and encoder values to motor commands and odometry, respectfully.
    quad_pulses_per_meter: 1426
    quad_pulses_per_revolution: 537.0

    # Based upon your particular robot model.
    # The wheel separation and radius, in meters.
    wheel_radius: 0.06
    wheel_separation: 0.414

    # Topic name to be used to publish the RoboClaw status messages.
    roboclaw_status_topic: "roboclaw_status"

    # How often, in Hz, to sense the various RoboClaw internal values.
    # This is the rate that Joint State, Odomentry and
    # RoboClaw status messages are published.
    sensor_rate_hz: 20.0

    # Current protection parameters
    # Time window (in seconds) for averaging motor current readings
    # 0.0 = disabled (uses instantaneous current - legacy behavior)
    # 0.1-10.0 = uses averaged current over the specified window
    current_filter_window_seconds: 1.0
    
    # Recovery timeout (in seconds) - time of zero cmd_vel required 
    # before auto-recovery from over-current condition
    # 0.0 = disabled (no auto-recovery, requires manual intervention)
    # 1.0-60.0 = seconds to wait before attempting recovery
    recovery_timeout_seconds: 5.0

    # Debugging control.
    do_debug: false # True => Log RoboClaw commands and responses.
    do_low_level_debug: false # True => Log low-level serial and RoboClaw data.